
(module


(import "env" "ethereum_getCallValue" (func $getCallValue (param i32) ))



(import "env" "ethereum_revert" (func $revert (param i32 i32) ))
(import "env" "ethereum_codeCopy" (func $codeCopy (param i32 i32 i32) ))
(import "env" "ethereum_finish" (func $finish (param i32 i32) ))
(import "env" "ethereum_getCallDataSize" (func $getCallDataSize  (result i32)))

(import "env" "ethereum_callDataCopy" (func $callDataCopy (param i32 i32 i32) ))






(import "env" "ethereum_getAddress" (func $getAddress (param i32) ))



(import "env" "ethereum_getGasLeft" (func $getGasLeft  (result i64)))
(import "env" "ethereum_callStatic" (func $callStatic (param i64 i32 i32 i32 i32 i32) (result i32)))
(import "env" "ethereum_getReturnDataSize" (func $getReturnDataSize  (result i32)))
(import "env" "ethereum_returnDataCopy" (func $returnDataCopy (param i32 i32 i32) ))
(import "env" "ethereum_storageStore" (func $storageStore (param i32 i32) ))
(import "env" "ethereum_log" (func $log (param i32 i32 i32 i32 i32 i32 i32) ))










(import "env" "ethereum_useGas" (func $useGas (param i64)))

(import "env" "ethereum_debugPrinti32" (func $debugPrinti32 (param i32 i32) (result i32)))
(import "env" "ethereum_debugPrinti64" (func $debugPrinti64 (param i64 i32) (result i64)))

  ;; /*** for cosmwasm

  (type $et12 (func))
  (func $ewasm_interface_version_1 (export "ewasm_interface_version_1") (export "requires_ewasm") (type $et12)
      (nop))

  ;; ********** /


  (global $cb_dest (mut i32) (i32.const 0))
  (global $sp (mut i32) (i32.const -32))
  (global $init (mut i32) (i32.const 0))

  ;; memory related global
  ;; (global $evmbytecodestart i32  (i32.const 33832))
  (global $memstart i32  (i32.const 62632))
  ;; the number of 256 words stored in memory
  (global $wordCount (mut i64) (i64.const 0))
  ;; what was charged for the last memory allocation
  (global $prevMemCost (mut i64) (i64.const 0))

  ;; for SHL, SHR, SAR
  (global $global_ (mut i64) (i64.const 0))
  (global $global__1 (mut i64) (i64.const 0))
  (global $global__2 (mut i64) (i64.const 0))

  ;; TODO: memory should only be 1, but can't resize right now
  (memory 500)
  (export "memory" (memory 0))




  (func $instantiate
    (export "instantiate")
    (local $jump_dest i32) (local $jump_map_switch i32)
    (local.set $jump_dest (i32.const -1))

    (block $done
      (loop $loop
        (block $1
  (block $0
    (if
      (i32.eqz (global.get $init))
      (then
        (global.set $init (i32.const 1))
        (br $0))
      (else
        ;; the callback dest can never be in the first block
        (if (i32.eq (global.get $cb_dest) (i32.const 0))
          (then
            (if (i32.eq (local.get $jump_dest) (i32.const 16))
                (then (br $1))
                (else (unreachable)))
          )
          (else
            ;; return callback destination and zero out $cb_dest
            (local.set $jump_map_switch (global.get $cb_dest))
            (global.set $cb_dest (i32.const 0))
            (br_table $0  $1 (local.get $jump_map_switch))
          )))))(call $useGas (i64.const 28)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 128))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $CALLVALUE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 6)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $REVERT) (br $done)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
)(call $useGas (i64.const 18)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1917))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $CODECOPY)
(global.set $sp (i32.add (global.get $sp) (i32.const -96)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $RETURN) (br $done)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
)))(func $PUSH
  (param $a0 i64)
  (param $a1 i64)
  (param $a2 i64)
  (param $a3 i64)
  (local $sp i32)

  ;; increament stack pointer
  (local.set $sp (i32.add (global.get $sp) (i32.const 32)))

  (i64.store (local.get $sp) (local.get $a3))
  (i64.store (i32.add (local.get $sp) (i32.const 8)) (local.get $a2))
  (i64.store (i32.add (local.get $sp) (i32.const 16)) (local.get $a1))
  (i64.store (i32.add (local.get $sp) (i32.const 24)) (local.get $a0))
)
;; stack:
;;  0: word
;; -1: offset
(func $MSTORE
  (local $sp i32)

  (local $offset   i32)

  (local $offset0 i64)
  (local $offset1 i64)
  (local $offset2 i64)
  (local $offset3 i64)

  ;; load args from the stack
  (local.set $offset0 (i64.load          (global.get $sp)))
  (local.set $offset1 (i64.load (i32.add (global.get $sp) (i32.const 8))))
  (local.set $offset2 (i64.load (i32.add (global.get $sp) (i32.const 16))))
  (local.set $offset3 (i64.load (i32.add (global.get $sp) (i32.const 24))))

  (local.set $offset
             (call $check_overflow (local.get $offset0)
                                   (local.get $offset1)
                                   (local.get $offset2)
                                   (local.get $offset3)))
  ;; subtrace gas useage
  (call $memusegas (local.get $offset) (i32.const 32))

  ;; pop item from the stack
  (local.set $sp (i32.sub (global.get $sp) (i32.const 32)))

  ;; swap top stack item
  (drop (call $bswap_m256 (local.get $sp)))

  (local.set $offset (i32.add (local.get $offset) (global.get $memstart)))
  ;; store word to memory
  (i64.store          (local.get $offset)                 (i64.load          (local.get $sp)))
  (i64.store (i32.add (local.get $offset) (i32.const 8))  (i64.load (i32.add (local.get $sp) (i32.const  8))))
  (i64.store (i32.add (local.get $offset) (i32.const 16)) (i64.load (i32.add (local.get $sp) (i32.const 16))))
  (i64.store (i32.add (local.get $offset) (i32.const 24)) (i64.load (i32.add (local.get $sp) (i32.const 24))))
)
;; generated by ./wasm/generateInterface.js
(func $CALLVALUE   (call $getCallValue(i32.add (global.get $sp) (i32.const 32)))(drop (call $bswap_m256 (i32.add (global.get $sp) (i32.const 32)))))(func $DUP
  (param $a0 i32)
  (local $sp i32)

  (local $sp_ref i32)

  (local.set $sp (i32.add (global.get $sp) (i32.const 32)))
  (local.set $sp_ref (i32.sub (i32.sub (local.get $sp) (i32.const 8)) (i32.mul (local.get $a0) (i32.const 32))))

  (i64.store (i32.add (local.get $sp) (i32.const 24)) (i64.load (local.get $sp_ref)))
  (i64.store (i32.add (local.get $sp) (i32.const 16)) (i64.load (i32.sub (local.get $sp_ref) (i32.const 8))))
  (i64.store (i32.add (local.get $sp) (i32.const  8)) (i64.load (i32.sub (local.get $sp_ref) (i32.const 16))))
  (i64.store          (local.get $sp)                 (i64.load (i32.sub (local.get $sp_ref) (i32.const 24))))
)
(func $ISZERO
  (local $a0 i64)
  (local $a1 i64)
  (local $a2 i64)
  (local $a3 i64)

  ;; load args from the stack
  (local.set $a0 (i64.load (i32.add (global.get $sp) (i32.const 24))))
  (local.set $a1 (i64.load (i32.add (global.get $sp) (i32.const 16))))
  (local.set $a2 (i64.load (i32.add (global.get $sp) (i32.const 8))))
  (local.set $a3 (i64.load (global.get $sp)))

  (i64.store (global.get $sp)
    (i64.extend_i32_u
      (call $iszero_256 (local.get $a0) (local.get $a1) (local.get $a2) (local.get $a3))
    )
  )

  ;; zero out the rest of memory
  (i64.store (i32.add (global.get $sp) (i32.const 8)) (i64.const 0))
  (i64.store (i32.add (global.get $sp) (i32.const 16)) (i64.const 0))
  (i64.store (i32.add (global.get $sp) (i32.const 24)) (i64.const 0))
)
(func $check_overflow
  (param $a i64)
  (param $b i64)
  (param $c i64)
  (param $d i64)
  (result i32)

  (local $MAX_INT i32)
  (local.set $MAX_INT (i32.const -1))

  (if
    (i32.and
      (i32.and
        (i64.eqz  (local.get $d))
        (i64.eqz  (local.get $c)))
      (i32.and
        (i64.eqz  (local.get $b))
        (i64.lt_u (local.get $a) (i64.extend_i32_u (local.get $MAX_INT)))))
     (return (i32.wrap_i64 (local.get $a))))

     (return (local.get $MAX_INT))
)
;; generated by ./wasm/generateInterface.js
(func $REVERT (local $offset0 i32)(local $length0 i32) (local.set $offset0 (call $check_overflow
          (i64.load (global.get $sp))
          (i64.load (i32.add (global.get $sp) (i32.const 8)))
          (i64.load (i32.add (global.get $sp) (i32.const 16)))
          (i64.load (i32.add (global.get $sp) (i32.const 24)))))(local.set $length0 (call $check_overflow
          (i64.load (i32.add (global.get $sp) (i32.const -32)))
          (i64.load (i32.add (global.get $sp) (i32.const -24)))
          (i64.load (i32.add (global.get $sp) (i32.const -16)))
          (i64.load (i32.add (global.get $sp) (i32.const -8)))))
    (call $memusegas (local.get $offset0) (local.get $length0))
    (local.set $offset0 (i32.add (global.get $memstart) (local.get $offset0))) (call $revert(local.get $offset0)(local.get $length0)));; generated by ./wasm/generateInterface.js
(func $CODECOPY (local $offset0 i32)(local $length0 i32) (local.set $offset0 (call $check_overflow
          (i64.load (global.get $sp))
          (i64.load (i32.add (global.get $sp) (i32.const 8)))
          (i64.load (i32.add (global.get $sp) (i32.const 16)))
          (i64.load (i32.add (global.get $sp) (i32.const 24)))))(local.set $length0 (call $check_overflow
          (i64.load (i32.add (global.get $sp) (i32.const -64)))
          (i64.load (i32.add (global.get $sp) (i32.const -56)))
          (i64.load (i32.add (global.get $sp) (i32.const -48)))
          (i64.load (i32.add (global.get $sp) (i32.const -40)))))
    (call $memusegas (local.get $offset0) (local.get $length0))
    (local.set $offset0 (i32.add (global.get $memstart) (local.get $offset0))) (call $codeCopy(local.get $offset0)(call $check_overflow
          (i64.load (i32.add (global.get $sp) (i32.const -32)))
          (i64.load (i32.add (global.get $sp) (i32.const -24)))
          (i64.load (i32.add (global.get $sp) (i32.const -16)))
          (i64.load (i32.add (global.get $sp) (i32.const -8))))(local.get $length0)));; generated by ./wasm/generateInterface.js
(func $RETURN (local $offset0 i32)(local $length0 i32) (local.set $offset0 (call $check_overflow
          (i64.load (global.get $sp))
          (i64.load (i32.add (global.get $sp) (i32.const 8)))
          (i64.load (i32.add (global.get $sp) (i32.const 16)))
          (i64.load (i32.add (global.get $sp) (i32.const 24)))))(local.set $length0 (call $check_overflow
          (i64.load (i32.add (global.get $sp) (i32.const -32)))
          (i64.load (i32.add (global.get $sp) (i32.const -24)))
          (i64.load (i32.add (global.get $sp) (i32.const -16)))
          (i64.load (i32.add (global.get $sp) (i32.const -8)))))
    (call $memusegas (local.get $offset0) (local.get $length0))
    (local.set $offset0 (i32.add (global.get $memstart) (local.get $offset0))) (call $finish(local.get $offset0)(local.get $length0)));; generated by ./wasm/generateInterface.js
(func $CALLDATASIZE   (i64.store (i32.add (global.get $sp) (i32.const 32)) (i64.extend_i32_u (call $getCallDataSize)))
    ;; zero out mem
    (i64.store (i32.add (global.get $sp) (i32.const 56)) (i64.const 0))
    (i64.store (i32.add (global.get $sp) (i32.const 48)) (i64.const 0))
    (i64.store (i32.add (global.get $sp) (i32.const 40)) (i64.const 0)))(func $LT
  (local $sp i32)

  (local $a0 i64)
  (local $a1 i64)
  (local $a2 i64)
  (local $a3 i64)
  (local $b0 i64)
  (local $b1 i64)
  (local $b2 i64)
  (local $b3 i64)

  (local.set $sp (global.get $sp))

  ;; load args from the stack
  (local.set $a0 (i64.load (i32.add (local.get $sp) (i32.const 24))))
  (local.set $a1 (i64.load (i32.add (local.get $sp) (i32.const 16))))
  (local.set $a2 (i64.load (i32.add (local.get $sp) (i32.const 8))))
  (local.set $a3 (i64.load (local.get $sp)))

  (local.set $sp (i32.sub (local.get $sp) (i32.const 32)))

  (local.set $b0 (i64.load (i32.add (local.get $sp) (i32.const 24))))
  (local.set $b1 (i64.load (i32.add (local.get $sp) (i32.const 16))))
  (local.set $b2 (i64.load (i32.add (local.get $sp) (i32.const 8))))
  (local.set $b3 (i64.load (local.get $sp)))

  (i64.store (local.get $sp) (i64.extend_i32_u
    (i32.or  (i64.lt_u (local.get $a0) (local.get $b0)) ;; a0 < b0
    (i32.and (i64.eq   (local.get $a0) (local.get $b0)) ;; a0 == b0
    (i32.or  (i64.lt_u (local.get $a1) (local.get $b1)) ;; a1 < b1
    (i32.and (i64.eq   (local.get $a1) (local.get $b1)) ;; a1 == b1
    (i32.or  (i64.lt_u (local.get $a2) (local.get $b2)) ;; a2 < b2
    (i32.and (i64.eq   (local.get $a2) (local.get $b2)) ;; a2 == b2
             (i64.lt_u (local.get $a3) (local.get $b3)))))))))) ;; a3 < b3

  ;; zero  out the rest of the stack item
  (i64.store (i32.add (local.get $sp) (i32.const  8)) (i64.const 0))
  (i64.store (i32.add (local.get $sp) (i32.const 16)) (i64.const 0))
  (i64.store (i32.add (local.get $sp) (i32.const 24)) (i64.const 0))
)
;; stack:
;;  0: dataOffset
(func $CALLDATALOAD
  (local $writeOffset i32)
  (local $writeOffset0 i64)
  (local $writeOffset1 i64)
  (local $writeOffset2 i64)
  (local $writeOffset3 i64)

  (local.set $writeOffset0 (i64.load (i32.add (global.get $sp) (i32.const  0))))
  (local.set $writeOffset1 (i64.load (i32.add (global.get $sp) (i32.const  8))))
  (local.set $writeOffset2 (i64.load (i32.add (global.get $sp) (i32.const 16))))
  (local.set $writeOffset3 (i64.load (i32.add (global.get $sp) (i32.const 24))))

  (i64.store (i32.add (global.get $sp) (i32.const  0)) (i64.const 0))
  (i64.store (i32.add (global.get $sp) (i32.const  8)) (i64.const 0))
  (i64.store (i32.add (global.get $sp) (i32.const 16)) (i64.const 0))
  (i64.store (i32.add (global.get $sp) (i32.const 24)) (i64.const 0))

  (local.set $writeOffset
             (call $check_overflow (local.get $writeOffset0)
                                   (local.get $writeOffset1)
                                   (local.get $writeOffset2)
                                   (local.get $writeOffset3)))

  (call $callDataCopy (global.get $sp) (local.get $writeOffset) (i32.const 32))
  ;; swap top stack item
  (drop (call $bswap_m256 (global.get $sp)))
)
(func $SHR
    (local $sp i32)
    (local $x1 i64)
    (local $x2 i64)
    (local $x3 i64)
    (local $x4 i64)
    (local $y1 i64)
    (local $y2 i64)
    (local $y3 i64)
    (local $y4 i64)

    (local $z1 i64)
    (local $z2 i64)
    (local $z3 i64)
    (local $z4 i64)
    (local $t i64)

    ;; load args from the stack
    (local.set $x1 (i64.load (i32.add (global.get $sp) (i32.const 24))))
    (local.set $x2 (i64.load (i32.add (global.get $sp) (i32.const 16))))
    (local.set $x3 (i64.load (i32.add (global.get $sp) (i32.const 8))))
    (local.set $x4 (i64.load (global.get $sp)))

    (local.set $sp (i32.sub (global.get $sp) (i32.const 32)))

    (local.set $y1 (i64.load (i32.add (local.get $sp) (i32.const 24))))
    (local.set $y2 (i64.load (i32.add (local.get $sp) (i32.const 16))))
    (local.set $y3 (i64.load (i32.add (local.get $sp) (i32.const 8))))
    (local.set $y4 (i64.load (local.get $sp)))

    (block
        (if (i32.and (i64.eqz (local.get $x1)) (i64.eqz (local.get $x2))) (then
            (if (i64.eqz (local.get $x3)) (then
                (if (i64.eqz (local.get $x4))
                    (then
                        (local.set $z1 (local.get $y1))
                        (local.set $z2 (local.get $y2))
                        (local.set $z3 (local.get $y3))
                        (local.set $z4 (local.get $y4))
                    )
                    (else
                        (if (i64.lt_u (local.get $x4) (i64.const 256)) (then
                            (if (i64.ge_u (local.get $x4) (i64.const 128)) (then
                                (local.set $y4 (local.get $y2))
                                (local.set $y3 (local.get $y1))
                                (local.set $y2 (i64.const 0))
                                (local.set $y1 (i64.const 0))
                                (local.set $x4 (i64.sub (local.get $x4) (i64.const 128)))
                            ))
                            (if (i64.ge_u (local.get $x4) (i64.const 64)) (then
                                (local.set $y4 (local.get $y3))
                                (local.set $y3 (local.get $y2))
                                (local.set $y2 (local.get $y1))
                                (local.set $y1 (i64.const 0))
                                (local.set $x4 (i64.sub (local.get $x4) (i64.const 64)))
                            ))
                            (nop)
                            (block
                                (local.set $z4 (call $shr_single (local.get $y4) (local.get $x4)))
                                (local.set $t (global.get $global_))

                            )
                            (block
                                (local.set $z3 (call $shr_single (local.get $y3) (local.get $x4)))
                                (local.set $t (global.get $global_))

                            )
                            (local.set $z4 (i64.or (local.get $z4) (local.get $t)))
                            (block
                                (local.set $z2 (call $shr_single (local.get $y2) (local.get $x4)))
                                (local.set $t (global.get $global_))

                            )
                            (local.set $z3 (i64.or (local.get $z3) (local.get $t)))
                            (block
                                (local.set $z1 (call $shr_single (local.get $y1) (local.get $x4)))
                                (local.set $t (global.get $global_))

                            )
                            (local.set $z2 (i64.or (local.get $z2) (local.get $t)))
                        ))
                    )
                )
            ))
        ))

    )
    (i64.store (i32.add (local.get $sp) (i32.const 24)) (local.get $z1))
    (i64.store (i32.add (local.get $sp) (i32.const 16)) (local.get $z2))
    (i64.store (i32.add (local.get $sp) (i32.const  8)) (local.get $z3))
    (i64.store          (local.get $sp)                 (local.get $z4))
)

(func $shr_single
    (param $a i64)
    (param $amount i64)
    (result i64)
    (local $x i64)
    (local $y i64)
    (block
        (local.set $y (i64.shl (local.get $a) (i64.sub (i64.const 64) (local.get $amount))))
        (local.set $x (i64.shr_u (local.get $a) (local.get $amount)))

    )
    (global.set $global_ (local.get $y))
    (local.get $x)
)
(func $EQ
  (local $sp i32)

  (local.set $sp (i32.sub (global.get $sp) (i32.const 32)))
  (i64.store (local.get $sp)
    (i64.extend_i32_u
      (i32.and (i64.eq   (i64.load (i32.add (local.get $sp) (i32.const 56))) (i64.load (i32.add (local.get $sp) (i32.const 24))))
      (i32.and (i64.eq   (i64.load (i32.add (local.get $sp) (i32.const 48))) (i64.load (i32.add (local.get $sp) (i32.const 16))))
      (i32.and (i64.eq   (i64.load (i32.add (local.get $sp) (i32.const 40))) (i64.load (i32.add (local.get $sp) (i32.const  8))))
               (i64.eq   (i64.load (i32.add (local.get $sp) (i32.const 32))) (i64.load          (local.get $sp))))))))

  (i64.store (i32.add (local.get $sp) (i32.const 24)) (i64.const 0))
  (i64.store (i32.add (local.get $sp) (i32.const 16)) (i64.const 0))
  (i64.store (i32.add (local.get $sp) (i32.const  8)) (i64.const 0))
)
(func $SUB
  (local $sp i32)

  (local $a i64)
  (local $b i64)
  (local $c i64)
  (local $d i64)

  (local $a1 i64)
  (local $b1 i64)
  (local $c1 i64)
  (local $d1 i64)

  (local $carry i64)
  (local $temp i64)

  (local.set $a (i64.load (i32.add (global.get $sp) (i32.const 24))))
  (local.set $b (i64.load (i32.add (global.get $sp) (i32.const 16))))
  (local.set $c (i64.load (i32.add (global.get $sp) (i32.const  8))))
  (local.set $d (i64.load          (global.get $sp)))
  ;; decement the stack pointer
  (local.set $sp (i32.sub (global.get $sp) (i32.const 32)))

  (local.set $a1 (i64.load (i32.add (local.get $sp) (i32.const 24))))
  (local.set $b1 (i64.load (i32.add (local.get $sp) (i32.const 16))))
  (local.set $c1 (i64.load (i32.add (local.get $sp) (i32.const  8))))
  (local.set $d1 (i64.load          (local.get $sp)))

  ;; a * 64^3 + b*64^2 + c*64 + d
  ;; d
  (local.set $carry (i64.extend_i32_u (i64.lt_u (local.get $d) (local.get $d1))))
  (local.set $d (i64.sub (local.get $d) (local.get $d1)))

  ;; c
  (local.set $temp (i64.sub (local.get $c) (local.get $carry)))
  (local.set $carry (i64.extend_i32_u (i64.gt_u (local.get $temp) (local.get $c))))
  (local.set $c (i64.sub (local.get $temp) (local.get $c1)))
  (local.set $carry (i64.or (i64.extend_i32_u (i64.gt_u (local.get $c) (local.get $temp))) (local.get $carry)))

  ;; b
  (local.set $temp (i64.sub (local.get $b) (local.get $carry)))
  (local.set $carry (i64.extend_i32_u (i64.gt_u (local.get $temp) (local.get $b))))
  (local.set $b (i64.sub (local.get $temp) (local.get $b1)))

  ;; a
  (local.set $a (i64.sub (i64.sub (local.get $a) (i64.or (i64.extend_i32_u (i64.gt_u (local.get $b) (local.get $temp))) (local.get $carry))) (local.get $a1)))

  (i64.store (i32.add (local.get $sp) (i32.const 24)) (local.get $a))
  (i64.store (i32.add (local.get $sp) (i32.const 16)) (local.get $b))
  (i64.store (i32.add (local.get $sp) (i32.const  8)) (local.get $c))
  (i64.store          (local.get $sp)                 (local.get $d))
)
(func $ADD
  (local $sp i32)

  (local $a i64)
  (local $c i64)
  (local $d i64)
  (local $carry i64)

  (local.set $sp (global.get $sp))

  ;; d c b a
  ;; pop the stack
  (local.set $a (i64.load (i32.add (local.get $sp) (i32.const 24))))
  (local.set $c (i64.load (i32.add (local.get $sp) (i32.const 8))))
  (local.set $d (i64.load (local.get $sp)))
  ;; decement the stack pointer
  (local.set $sp (i32.sub (local.get $sp) (i32.const 8)))

  ;; d
  (local.set $carry (i64.add (local.get $d) (i64.load (i32.sub (local.get $sp) (i32.const 24)))))
  ;; save d  to mem
  (i64.store (i32.sub (local.get $sp) (i32.const 24)) (local.get $carry))
  ;; check  for overflow
  (local.set $carry (i64.extend_i32_u (i64.lt_u (local.get $carry) (local.get $d))))

  ;; c use $d as reg
  (local.set $d     (i64.add (i64.load (i32.sub (local.get $sp) (i32.const 16))) (local.get $carry)))
  (local.set $carry (i64.extend_i32_u (i64.lt_u (local.get $d) (local.get $carry))))
  (local.set $d     (i64.add (local.get $c) (local.get $d)))
  ;; store the result
  (i64.store (i32.sub (local.get $sp) (i32.const 16)) (local.get $d))
  ;; check overflow
  (local.set $carry (i64.or (i64.extend_i32_u  (i64.lt_u (local.get $d) (local.get $c))) (local.get $carry)))

  ;; b
  ;; add carry
  (local.set $d     (i64.add (i64.load (i32.sub (local.get $sp) (i32.const 8))) (local.get $carry)))
  (local.set $carry (i64.extend_i32_u (i64.lt_u (local.get $d) (local.get $carry))))

  ;; use reg c
  (local.set $c (i64.load (i32.add (local.get $sp) (i32.const 24))))
  (local.set $d (i64.add (local.get $c) (local.get $d)))
  (i64.store (i32.sub (local.get $sp) (i32.const 8)) (local.get $d))
  ;; a
  (i64.store (local.get $sp)
             (i64.add        ;; add a
               (local.get $a)
               (i64.add
                 (i64.load (local.get $sp))  ;; load the operand
                 (i64.or  ;; carry
                   (i64.extend_i32_u (i64.lt_u (local.get $d) (local.get $c)))
                   (local.get $carry)))))
)
(func $SWAP
  (param $a0 i32)
  (local $sp_ref i32)

  (local $topa i64)
  (local $topb i64)
  (local $topc i64)
  (local $topd i64)

  (local.set $sp_ref (i32.sub (i32.add  (global.get $sp) (i32.const 24)) (i32.mul (i32.add (local.get $a0) (i32.const 1)) (i32.const 32))))

  (local.set $topa (i64.load (i32.add (global.get $sp) (i32.const 24))))
  (local.set $topb (i64.load (i32.add (global.get $sp) (i32.const 16))))
  (local.set $topc (i64.load (i32.add (global.get $sp) (i32.const  8))))
  (local.set $topd (i64.load          (global.get $sp)))

  ;; replace the top element
  (i64.store (i32.add (global.get $sp) (i32.const 24)) (i64.load (local.get $sp_ref)))
  (i64.store (i32.add (global.get $sp) (i32.const 16)) (i64.load (i32.sub (local.get $sp_ref) (i32.const 8))))
  (i64.store (i32.add (global.get $sp) (i32.const  8)) (i64.load (i32.sub (local.get $sp_ref) (i32.const 16))))
  (i64.store          (global.get $sp)                 (i64.load (i32.sub (local.get $sp_ref) (i32.const 24))))

  ;; store the old top element
  (i64.store (local.get $sp_ref)                          (local.get $topa))
  (i64.store (i32.sub (local.get $sp_ref) (i32.const 8))  (local.get $topb))
  (i64.store (i32.sub (local.get $sp_ref) (i32.const 16)) (local.get $topc))
  (i64.store (i32.sub (local.get $sp_ref) (i32.const 24)) (local.get $topd))
)
;; stack:
;;  0: offset
(func $MLOAD
  (local $offset i32)
  (local $offset0 i64)
  (local $offset1 i64)
  (local $offset2 i64)
  (local $offset3 i64)

  ;; load args from the stack
  (local.set $offset0 (i64.load          (global.get $sp)))
  (local.set $offset1 (i64.load (i32.add (global.get $sp) (i32.const 8))))
  (local.set $offset2 (i64.load (i32.add (global.get $sp) (i32.const 16))))
  (local.set $offset3 (i64.load (i32.add (global.get $sp) (i32.const 24))))

  (local.set $offset
             (call $check_overflow (local.get $offset0)
                                   (local.get $offset1)
                                   (local.get $offset2)
                                   (local.get $offset3)))
  ;; subttract gas useage
  (call $memusegas (local.get $offset) (i32.const  32))

  ;; FIXME: how to deal with overflow?
  (local.set $offset (i32.add (local.get $offset) (global.get $memstart)))

  (i64.store (i32.add (global.get $sp) (i32.const 24)) (i64.load (i32.add (local.get $offset) (i32.const 24))))
  (i64.store (i32.add (global.get $sp) (i32.const 16)) (i64.load (i32.add (local.get $offset) (i32.const 16))))
  (i64.store (i32.add (global.get $sp) (i32.const  8)) (i64.load (i32.add (local.get $offset) (i32.const  8))))
  (i64.store          (global.get $sp)                 (i64.load          (local.get $offset)))

  ;; swap
  (drop (call $bswap_m256 (global.get $sp)))
)
;; generated by ./wasm/generateInterface.js
(func $ADDRESS   (call $getAddress(i32.add (global.get $sp) (i32.const 32)))(drop (call $bswap_m256 (i32.add (global.get $sp) (i32.const 32)))))(func $AND
  (i64.store (i32.sub (global.get $sp) (i32.const 8))  (i64.and (i64.load (i32.sub (global.get $sp) (i32.const 8)))  (i64.load (i32.add (global.get $sp) (i32.const 24)))))
  (i64.store (i32.sub (global.get $sp) (i32.const 16)) (i64.and (i64.load (i32.sub (global.get $sp) (i32.const 16))) (i64.load (i32.add (global.get $sp) (i32.const 16)))))
  (i64.store (i32.sub (global.get $sp) (i32.const 24)) (i64.and (i64.load (i32.sub (global.get $sp) (i32.const 24))) (i64.load (i32.add (global.get $sp) (i32.const 8)))))
  (i64.store (i32.sub (global.get $sp) (i32.const 32)) (i64.and (i64.load (i32.sub (global.get $sp) (i32.const 32))) (i64.load (global.get $sp))))
)
(func $NOT
  ;; FIXME: consider using 0xffffffffffffffff instead of -1?
  (i64.store (i32.add (global.get $sp) (i32.const 24)) (i64.xor (i64.load (i32.add (global.get $sp) (i32.const 24))) (i64.const -1)))
  (i64.store (i32.add (global.get $sp) (i32.const 16)) (i64.xor (i64.load (i32.add (global.get $sp) (i32.const 16))) (i64.const -1)))
  (i64.store (i32.add (global.get $sp) (i32.const  8)) (i64.xor (i64.load (i32.add (global.get $sp) (i32.const  8))) (i64.const -1)))
  (i64.store (i32.add (global.get $sp) (i32.const  0)) (i64.xor (i64.load (i32.add (global.get $sp) (i32.const  0))) (i64.const -1)))
)
(func $OR
  (i64.store (i32.sub (global.get $sp) (i32.const  8)) (i64.or (i64.load (i32.sub (global.get $sp) (i32.const  8))) (i64.load (i32.add (global.get $sp) (i32.const 24)))))
  (i64.store (i32.sub (global.get $sp) (i32.const 16)) (i64.or (i64.load (i32.sub (global.get $sp) (i32.const 16))) (i64.load (i32.add (global.get $sp) (i32.const 16)))))
  (i64.store (i32.sub (global.get $sp) (i32.const 24)) (i64.or (i64.load (i32.sub (global.get $sp) (i32.const 24))) (i64.load (i32.add (global.get $sp) (i32.const  8)))))
  (i64.store (i32.sub (global.get $sp) (i32.const 32)) (i64.or (i64.load (i32.sub (global.get $sp) (i32.const 32))) (i64.load          (global.get $sp))))
)
;; generated by ./wasm/generateInterface.js
(func $GAS   (i64.store (i32.add (global.get $sp) (i32.const 32)) (call $getGasLeft))
    ;; zero out mem
    (i64.store (i32.add (global.get $sp) (i32.const 56)) (i64.const 0))
    (i64.store (i32.add (global.get $sp) (i32.const 48)) (i64.const 0))
    (i64.store (i32.add (global.get $sp) (i32.const 40)) (i64.const 0)));; generated by ./wasm/generateInterface.js
(func $STATICCALL (local $offset0 i32)(local $length0 i32)(local $offset1 i32)(local $length1 i32) (local.set $offset0 (call $check_overflow
          (i64.load (i32.add (global.get $sp) (i32.const -64)))
          (i64.load (i32.add (global.get $sp) (i32.const -56)))
          (i64.load (i32.add (global.get $sp) (i32.const -48)))
          (i64.load (i32.add (global.get $sp) (i32.const -40)))))(local.set $length0 (call $check_overflow
          (i64.load (i32.add (global.get $sp) (i32.const -96)))
          (i64.load (i32.add (global.get $sp) (i32.const -88)))
          (i64.load (i32.add (global.get $sp) (i32.const -80)))
          (i64.load (i32.add (global.get $sp) (i32.const -72)))))
    (call $memusegas (local.get $offset0) (local.get $length0))
    (local.set $offset0 (i32.add (global.get $memstart) (local.get $offset0)))(local.set $offset1 (call $check_overflow
          (i64.load (i32.add (global.get $sp) (i32.const -128)))
          (i64.load (i32.add (global.get $sp) (i32.const -120)))
          (i64.load (i32.add (global.get $sp) (i32.const -112)))
          (i64.load (i32.add (global.get $sp) (i32.const -104)))))(local.set $length1 (call $check_overflow
          (i64.load (i32.add (global.get $sp) (i32.const -160)))
          (i64.load (i32.add (global.get $sp) (i32.const -152)))
          (i64.load (i32.add (global.get $sp) (i32.const -144)))
          (i64.load (i32.add (global.get $sp) (i32.const -136)))))
    (call $memusegas (local.get $offset1) (local.get $length1))
    (local.set $offset1 (i32.add (global.get $memstart) (local.get $offset1)))
    (i64.store
      (call $debugPrinti32 (i32.add (global.get $sp) (i32.const -160)) (i32.const 0))
      (call $debugPrinti64 (i64.extend_i32_u (i32.eqz
        (call $debugPrinti32 (call $callStatic(call $check_overflow_i64
          (i64.load (global.get $sp))
          (i64.load (i32.add (global.get $sp) (i32.const 8)))
          (i64.load (i32.add (global.get $sp) (i32.const 16)))
          (i64.load (i32.add (global.get $sp) (i32.const 24))))(call $bswap_m256 (i32.add (global.get $sp) (i32.const -32)))(local.get $offset0)(local.get $length0)(local.get $offset1)(local.get $length1))
          (i32.const 777)
        ))
        )
          (i32.const 888)
          ;; (global.get $sp)
          ;; (i32.add (global.get $sp) (i32.const -160))
      )
    )
    (drop (call $debugPrinti32 (i32.add (global.get $sp) (i32.const -160)) (i32.const 2)))
    ;; zero out mem
    (i64.store (i32.add (global.get $sp) (i32.const -136)) (i64.const 0))
    (i64.store (i32.add (global.get $sp) (i32.const -144)) (i64.const 0))
    (i64.store (i32.add (global.get $sp) (i32.const -152)) (i64.const 0)));; generated by ./wasm/generateInterface.js
(func $RETURNDATASIZE   (i64.store (i32.add (global.get $sp) (i32.const 32)) (i64.extend_i32_u (call $getReturnDataSize)))
    ;; zero out mem
    (i64.store (i32.add (global.get $sp) (i32.const 56)) (i64.const 0))
    (i64.store (i32.add (global.get $sp) (i32.const 48)) (i64.const 0))
    (i64.store (i32.add (global.get $sp) (i32.const 40)) (i64.const 0)));; generated by ./wasm/generateInterface.js
(func $RETURNDATACOPY (local $offset0 i32)(local $length0 i32) (local.set $offset0 (call $check_overflow
          (i64.load (global.get $sp))
          (i64.load (i32.add (global.get $sp) (i32.const 8)))
          (i64.load (i32.add (global.get $sp) (i32.const 16)))
          (i64.load (i32.add (global.get $sp) (i32.const 24)))))(local.set $length0 (call $check_overflow
          (i64.load (i32.add (global.get $sp) (i32.const -64)))
          (i64.load (i32.add (global.get $sp) (i32.const -56)))
          (i64.load (i32.add (global.get $sp) (i32.const -48)))
          (i64.load (i32.add (global.get $sp) (i32.const -40)))))
    (call $memusegas (local.get $offset0) (local.get $length0))
    (local.set $offset0 (i32.add (global.get $memstart) (local.get $offset0))) (call $returnDataCopy(local.get $offset0)(call $check_overflow
          (i64.load (i32.add (global.get $sp) (i32.const -32)))
          (i64.load (i32.add (global.get $sp) (i32.const -24)))
          (i64.load (i32.add (global.get $sp) (i32.const -16)))
          (i64.load (i32.add (global.get $sp) (i32.const -8))))(local.get $length0)));; generated by ./wasm/generateInterface.js
(func $SSTORE   (call $storageStore(call $bswap_m256 (global.get $sp))(call $bswap_m256 (i32.add (global.get $sp) (i32.const -32)))))(func $LOG
  (param $number i32)

  (local $offset i32)
  (local $offset0 i64)
  (local $offset1 i64)
  (local $offset2 i64)
  (local $offset3 i64)

  (local $length i32)
  (local $length0 i64)
  (local $length1 i64)
  (local $length2 i64)
  (local $length3 i64)

  (local.set $offset0 (i64.load          (global.get $sp)))
  (local.set $offset1 (i64.load (i32.add (global.get $sp) (i32.const  8))))
  (local.set $offset2 (i64.load (i32.add (global.get $sp) (i32.const 16))))
  (local.set $offset3 (i64.load (i32.add (global.get $sp) (i32.const 24))))

  (local.set $length0 (i64.load (i32.sub (global.get $sp) (i32.const 32))))
  (local.set $length1 (i64.load (i32.sub (global.get $sp) (i32.const 24))))
  (local.set $length2 (i64.load (i32.sub (global.get $sp) (i32.const 16))))
  (local.set $length3 (i64.load (i32.sub (global.get $sp) (i32.const  8))))

  (local.set $offset
             (call $check_overflow (local.get $offset0)
                                   (local.get $offset1)
                                   (local.get $offset2)
                                   (local.get $offset3)))

  (local.set $length
             (call $check_overflow (local.get $length0)
                                   (local.get $length1)
                                   (local.get $length2)
                                   (local.get $length3)))

  (call $memusegas (local.get $offset) (local.get $length))

  (if (i32.eq (local.get $number) (i32.const 0))
    (then
      (call $log
             (local.get $offset)
             (local.get $length)
             (local.get $number)
             (i32.const  0)
             (i32.const  0)
             (i32.const  0)
             (i32.const  0))
    )
  )
  (if (i32.eq (local.get $number) (i32.const 1))
    (then
    (call $log
             (local.get $offset)
             (local.get $length)
             (local.get $number)
             (call $bswap_m256 (i32.sub (global.get $sp) (i32.const  64)))
             (i32.const  0)
             (i32.const  0)
             (i32.const  0))
    )
  )
  (if (i32.eq (local.get $number) (i32.const 2))
    (then
    (call $log
             (local.get $offset)
             (local.get $length)
             (local.get $number)
             (call $bswap_m256 (i32.sub (global.get $sp) (i32.const  64)))
             (call $bswap_m256 (i32.sub (global.get $sp) (i32.const  96)))
             (i32.const  0)
             (i32.const  0))
    )
  )
  (if (i32.eq (local.get $number) (i32.const 3))
    (then
    (call $log
             (local.get $offset)
             (local.get $length)
             (local.get $number)
             (call $bswap_m256 (i32.sub (global.get $sp) (i32.const  64)))
             (call $bswap_m256 (i32.sub (global.get $sp) (i32.const  96)))
             (call $bswap_m256 (i32.sub (global.get $sp) (i32.const 128)))
             (i32.const  0))
    )
  )
  (if (i32.eq (local.get $number) (i32.const 4))
    (then
    (call $log
             (local.get $offset)
             (local.get $length)
             (local.get $number)
             (call $bswap_m256 (i32.sub (global.get $sp) (i32.const  64)))
             (call $bswap_m256 (i32.sub (global.get $sp) (i32.const  96)))
             (call $bswap_m256 (i32.sub (global.get $sp) (i32.const 128)))
             (call $bswap_m256 (i32.sub (global.get $sp) (i32.const 160))))
    )
  )
)
(func $SLT
  (local $sp i32)

  (local $a0 i64)
  (local $a1 i64)
  (local $a2 i64)
  (local $a3 i64)
  (local $b0 i64)
  (local $b1 i64)
  (local $b2 i64)
  (local $b3 i64)

  ;; load args from the stack
  (local.set $a0 (i64.load (i32.add (global.get $sp) (i32.const 24))))
  (local.set $a1 (i64.load (i32.add (global.get $sp) (i32.const 16))))
  (local.set $a2 (i64.load (i32.add (global.get $sp) (i32.const 8))))
  (local.set $a3 (i64.load (global.get $sp)))

  (local.set $sp (i32.sub (global.get $sp) (i32.const 32)))

  (local.set $b0 (i64.load (i32.add (local.get $sp) (i32.const 24))))
  (local.set $b1 (i64.load (i32.add (local.get $sp) (i32.const 16))))
  (local.set $b2 (i64.load (i32.add (local.get $sp) (i32.const 8))))
  (local.set $b3 (i64.load (local.get $sp)))

  (i64.store (local.get $sp) (i64.extend_i32_u
    (i32.or  (i64.lt_s (local.get $a0) (local.get $b0)) ;; a0 < b0
    (i32.and (i64.eq   (local.get $a0) (local.get $b0)) ;; a0 == b0
    (i32.or  (i64.lt_u (local.get $a1) (local.get $b1)) ;; a1 < b1
    (i32.and (i64.eq   (local.get $a1) (local.get $b1)) ;; a1 == b1
    (i32.or  (i64.lt_u (local.get $a2) (local.get $b2)) ;; a2 < b2
    (i32.and (i64.eq   (local.get $a2) (local.get $b2)) ;; a2 == b2
             (i64.lt_u (local.get $a3) (local.get $b3)))))))))) ;; a3 < b3

  ;; zero  out the rest of the stack item
  (i64.store (i32.add (local.get $sp) (i32.const  8)) (i64.const 0))
  (i64.store (i32.add (local.get $sp) (i32.const 16)) (i64.const 0))
  (i64.store (i32.add (local.get $sp) (i32.const 24)) (i64.const 0))
)
(func $GT
  (local $sp i32)

  (local $a0 i64)
  (local $a1 i64)
  (local $a2 i64)
  (local $a3 i64)
  (local $b0 i64)
  (local $b1 i64)
  (local $b2 i64)
  (local $b3 i64)

  (local.set $sp (global.get $sp))

  ;; load args from the stack
  (local.set $a0 (i64.load (i32.add (local.get $sp) (i32.const 24))))
  (local.set $a1 (i64.load (i32.add (local.get $sp) (i32.const 16))))
  (local.set $a2 (i64.load (i32.add (local.get $sp) (i32.const 8))))
  (local.set $a3 (i64.load (local.get $sp)))

  (local.set $sp (i32.sub (local.get $sp) (i32.const 32)))

  (local.set $b0 (i64.load (i32.add (local.get $sp) (i32.const 24))))
  (local.set $b1 (i64.load (i32.add (local.get $sp) (i32.const 16))))
  (local.set $b2 (i64.load (i32.add (local.get $sp) (i32.const 8))))
  (local.set $b3 (i64.load (local.get $sp)))

  (i64.store (local.get $sp) (i64.extend_i32_u
    (i32.or (i64.gt_u (local.get $a0) (local.get $b0)) ;; a0 > b0
    (i32.and (i64.eq   (local.get $a0) (local.get $b0)) ;; a0 == a1
    (i32.or  (i64.gt_u (local.get $a1) (local.get $b1)) ;; a1 > b1
    (i32.and (i64.eq   (local.get $a1) (local.get $b1)) ;; a1 == b1
    (i32.or  (i64.gt_u (local.get $a2) (local.get $b2)) ;; a2 > b2
    (i32.and (i64.eq   (local.get $a2) (local.get $b2)) ;; a2 == b2
             (i64.gt_u (local.get $a3) (local.get $b3)))))))))) ;; a3 > b3

  ;; zero  out the rest of the stack item
  (i64.store (i32.add (local.get $sp) (i32.const  8)) (i64.const 0))
  (i64.store (i32.add (local.get $sp) (i32.const 16)) (i64.const 0))
  (i64.store (i32.add (local.get $sp) (i32.const 24)) (i64.const 0))
)
(func $memusegas
  (param $offset i32)
  (param $length i32)

  (local $cost i64)
  ;; the number of new words being allocated
  (local $newWordCount i64)

  (if (i32.eqz (local.get $length))
    (then (return))
  )

  ;; const newMemoryWordCount = Math.ceil[[offset + length] / 32]
  (local.set $newWordCount
    (i64.div_u (i64.add (i64.const 31) (i64.add (i64.extend_i32_u (local.get $offset)) (i64.extend_i32_u (local.get $length))))
               (i64.const 32)))

  ;;if [runState.highestMem >= highestMem]  return
  (if (i64.le_u (local.get $newWordCount) (global.get $wordCount))
    (then (return))
  )

  ;; words * 3 + words ^2 / 512
  (local.set $cost
     (i64.add
       (i64.mul (local.get $newWordCount) (i64.const 3))
       (i64.div_u
         (i64.mul (local.get $newWordCount)
                  (local.get $newWordCount))
         (i64.const 512))))

  (call $useGas  (i64.sub (local.get $cost) (global.get $prevMemCost)))
  (global.set $prevMemCost (local.get $cost))
  (global.set $wordCount (local.get $newWordCount))

  ;; grow actual memory
  ;; the first 31704 bytes are guaranteed to be available
  ;; adjust for 32 bytes  - the maximal size of MSTORE write
  ;; TODO it should be memory.size * page_size
  (local.set $offset (i32.add (local.get $length) (i32.add (local.get $offset) (global.get $memstart))))
  (if (i32.gt_u (local.get $offset) (i32.mul (i32.const 65536) (memory.size)))
    (then
      (drop (memory.grow
        (i32.div_u (i32.add (i32.const 65535) (i32.sub (local.get $offset) (memory.size))) (i32.const 65536))))
    )
  )
)
(func $bswap_m256
  (param $sp i32)
  (result i32)
  (local $temp i64)

  (local.set $temp (call $bswap_i64 (i64.load (local.get $sp))))
  (i64.store (local.get $sp) (call $bswap_i64 (i64.load (i32.add (local.get $sp) (i32.const 24)))))
  (i64.store (i32.add (local.get $sp) (i32.const 24)) (local.get $temp))

  (local.set $temp (call $bswap_i64 (i64.load (i32.add (local.get $sp) (i32.const 8)))))
  (i64.store (i32.add (local.get $sp) (i32.const  8)) (call $bswap_i64 (i64.load (i32.add (local.get $sp) (i32.const 16)))))
  (i64.store (i32.add (local.get $sp) (i32.const 16)) (local.get $temp))
  (local.get $sp)
)
(func $iszero_256
  (param i64)
  (param i64)
  (param i64)
  (param i64)
  (result i32)

  (i64.eqz (i64.or (i64.or (i64.or (local.get 0) (local.get 1)) (local.get 2)) (local.get 3)))
)
(func $callback
  (call $main)
)
;;
;; memcpy from ewasm-libc/ewasm-cleanup
;;
(func $memset
  (param $ptr i32)
  (param $value i32)
  (param $length i32)
  (result i32)
  (local $i i32)

  (local.set $i (i32.const 0))

  (block $done
    (loop $loop
      (if (i32.ge_u (local.get $i) (local.get $length))
        (br $done)
      )

      (i32.store8 (i32.add (local.get $ptr) (local.get $i)) (local.get $value))

      (local.set $i (i32.add (local.get $i) (i32.const 1)))
      (br $loop)
    )
  )
  (local.get $ptr)
)
(func $bswap_i64
  (param $int i64)
  (result i64)

  (i64.or
    (i64.or
      (i64.or
        (i64.and (i64.shr_u (local.get $int) (i64.const 56)) (i64.const 0xff)) ;; 7 -> 0
        (i64.and (i64.shr_u (local.get $int) (i64.const 40)) (i64.const 0xff00))) ;; 6 -> 1
      (i64.or
        (i64.and (i64.shr_u (local.get $int) (i64.const 24)) (i64.const 0xff0000)) ;; 5 -> 2
        (i64.and (i64.shr_u (local.get $int) (i64.const  8)) (i64.const 0xff000000)))) ;; 4 -> 3
    (i64.or
      (i64.or
        (i64.and (i64.shl (local.get $int) (i64.const 8))   (i64.const 0xff00000000)) ;; 3 -> 4
        (i64.and (i64.shl (local.get $int) (i64.const 24))   (i64.const 0xff0000000000))) ;; 2 -> 5
      (i64.or
        (i64.and (i64.shl (local.get $int) (i64.const 40))   (i64.const 0xff000000000000)) ;; 1 -> 6
        (i64.and (i64.shl (local.get $int) (i64.const 56))   (i64.const 0xff00000000000000))))) ;; 0 -> 7
)
(func $check_overflow_i64
  (param $a i64)
  (param $b i64)
  (param $c i64)
  (param $d i64)
  (result i64)

  (if
    (i32.and
      (i32.and
        (i64.eqz  (local.get $d))
        (i64.eqz  (local.get $c)))
      (i64.eqz  (local.get $b)))
    (return (local.get $a)))

    (return (i64.const 0xffffffffffffffff))
)
(func $callback_32
  (param $result i32)

  (i64.store (global.get $sp) (i64.extend_i32_u (local.get $result)))
  ;; zero out mem
  (i64.store (i32.add (global.get $sp) (i32.const 24)) (i64.const 0))
  (i64.store (i32.add (global.get $sp) (i32.const 16)) (i64.const 0))
  (i64.store (i32.add (global.get $sp) (i32.const 8)) (i64.const 0))

  (call $main)
)


  (func $main
    (export "main")
    (local $jump_dest i32) (local $jump_map_switch i32)
    (local.set $jump_dest (i32.const -1))

    (block $done
      (loop $loop
        (block $76 (block $75 (block $74 (block $73 (block $72 (block $71 (block $70 (block $69 (block $68 (block $67 (block $66 (block $65 (block $64 (block $63 (block $62 (block $61 (block $60 (block $59 (block $58 (block $57 (block $56 (block $55 (block $54 (block $53 (block $52 (block $51 (block $50 (block $49 (block $48 (block $47 (block $46 (block $45 (block $44 (block $43 (block $42 (block $41 (block $40 (block $39 (block $38 (block $37 (block $36 (block $35 (block $34 (block $33 (block $32 (block $31 (block $30 (block $29 (block $28 (block $27 (block $26 (block $25 (block $24 (block $23 (block $22 (block $21 (block $20 (block $19 (block $18 (block $17 (block $16 (block $15 (block $14 (block $13 (block $12 (block $11 (block $10 (block $9 (block $8 (block $7 (block $6 (block $5 (block $4 (block $3 (block $2 (block $1
  (block $0
    (if
      (i32.eqz (global.get $init))
      (then
        (global.set $init (i32.const 1))
        (br $0))
      (else
        ;; the callback dest can never be in the first block
        (if (i32.eq (global.get $cb_dest) (i32.const 0))
          (then
            (if (i32.eq (local.get $jump_dest) (i32.const 1860))
                (then (br $76))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1849))
                (then (br $75))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1840))
                (then (br $74))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1835))
                (then (br $73))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1788))
                (then (br $72))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1782))
                (then (br $71))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1767))
                (then (br $70))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1740))
                (then (br $69))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1737))
                (then (br $68))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1727))
                (then (br $67))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1716))
                (then (br $66))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1715))
                (then (br $65))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1697))
                (then (br $64))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1686))
                (then (br $63))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1675))
                (then (br $62))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1664))
                (then (br $61))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1663))
                (then (br $60))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1611))
                (then (br $59))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1600))
                (then (br $58))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1589))
                (then (br $57))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1578))
                (then (br $56))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1567))
                (then (br $55))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1561))
                (then (br $54))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1540))
                (then (br $53))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1529))
                (then (br $52))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1517))
                (then (br $51))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1511))
                (then (br $50))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1502))
                (then (br $49))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1490))
                (then (br $48))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1474))
                (then (br $47))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1464))
                (then (br $46))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1453))
                (then (br $45))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1444))
                (then (br $44))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1430))
                (then (br $43))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1429))
                (then (br $42))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1408))
                (then (br $41))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1402))
                (then (br $40))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1387))
                (then (br $39))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1382))
                (then (br $38))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1328))
                (then (br $37))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1291))
                (then (br $36))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1286))
                (then (br $35))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1227))
                (then (br $34))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1089))
                (then (br $33))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1073))
                (then (br $32))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1028))
                (then (br $31))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 1023))
                (then (br $30))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 964))
                (then (br $29))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 826))
                (then (br $28))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 810))
                (then (br $27))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 766))
                (then (br $26))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 747))
                (then (br $25))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 742))
                (then (br $24))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 734))
                (then (br $23))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 699))
                (then (br $22))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 694))
                (then (br $21))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 635))
                (then (br $20))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 497))
                (then (br $19))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 481))
                (then (br $18))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 436))
                (then (br $17))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 431))
                (then (br $16))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 372))
                (then (br $15))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 234))
                (then (br $14))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 218))
                (then (br $13))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 174))
                (then (br $12))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 155))
                (then (br $11))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 146))
                (then (br $10))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 133))
                (then (br $9))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 128))
                (then (br $8))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 107))
                (then (br $7))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 98))
                (then (br $6))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 85))
                (then (br $5))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 80))
                (then (br $4))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 59))
                (then (br $3))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 54))
                (then (br $2))
                (else (if (i32.eq (local.get $jump_dest) (i32.const 16))
                (then (br $1))
                (else (unreachable)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
          )
          (else
            ;; return callback destination and zero out $cb_dest
            (local.set $jump_map_switch (global.get $cb_dest))
            (global.set $cb_dest (i32.const 0))
            (br_table $0  $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 $32 $33 $34 $35 $36 $37 $38 $39 $40 $41 $42 $43 $44 $45 $46 $47 $48 $49 $50 $51 $52 $53 $54 $55 $56 $57 $58 $59 $60 $61 $62 $63 $64 $65 $66 $67 $68 $69 $70 $71 $72 $73 $74 $75 $76 (local.get $jump_map_switch))
          )))))(call $useGas (i64.const 28)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 128))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $CALLVALUE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 6)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $REVERT) (br $done)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
)(call $useGas (i64.const 22)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $CALLDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $LT)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 54))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 31)) (if (i32.gt_s (global.get $sp) (i32.const 32608))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $CALLDATALOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 224))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SHR)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3334662679))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $EQ)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 59))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 22)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3481497736))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $EQ)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 107))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
)(call $useGas (i64.const 7)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $REVERT) (br $done)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
)(call $useGas (i64.const 42)) (if (i32.gt_s (global.get $sp) (i32.const 32576))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 85))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $CALLDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 80))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1408))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 12)) (if (i32.gt_s (global.get $sp) (i32.const 32704))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 155))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 27)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 98))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1540))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 19)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $RETURN) (br $done)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
)(call $useGas (i64.const 42)) (if (i32.gt_s (global.get $sp) (i32.const 32576))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 133))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $CALLDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 128))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1408))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 12)) (if (i32.gt_s (global.get $sp) (i32.const 32704))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 747))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 27)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 146))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1540))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 19)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $RETURN) (br $done)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
)(call $useGas (i64.const 29)) (if (i32.gt_s (global.get $sp) (i32.const 32608))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $LT)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 174))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 19)) (if (i32.gt_s (global.get $sp) (i32.const 32704))
                 (then (unreachable)))(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 742))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 48)) (if (i32.gt_s (global.get $sp) (i32.const 32416))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 96))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADDRESS)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 4294967295)(i64.const -1)(i64.const -1))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $AND)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 8))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 218))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1675))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 33)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 36))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 234))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1540))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 122)) (if (i32.gt_s (global.get $sp) (i32.const 32480))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $PUSH (i64.const -4124476924212805632)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 4294967295)(i64.const -1)(i64.const -1)(i64.const -1))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $NOT)
(call $AND)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 4294967295)(i64.const -1)(i64.const -1)(i64.const -1))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $AND)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $OR)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 372))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1517))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 57)) (if (i32.gt_s (global.get $sp) (i32.const 32512))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $GAS)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $STATICCALL)
(global.set $sp (i32.add (global.get $sp) (i32.const -160)))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $RETURNDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $EQ)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 431))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 67)) (if (i32.gt_s (global.get $sp) (i32.const 32576))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 31))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $NOT)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 63))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $RETURNDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $AND)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $RETURNDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $RETURNDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $RETURNDATACOPY)
(global.set $sp (i32.add (global.get $sp) (i32.const -96)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 436))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 9)) (if (i32.gt_s (global.get $sp) (i32.const 32704))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 96))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
)(call $useGas (i64.const 55)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 64))
                  (then (unreachable)))(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 6))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $ADDRESS)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 4294967295)(i64.const -1)(i64.const -1))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $AND)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 8))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 481))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1675))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 33)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 36))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 497))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1540))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 122)) (if (i32.gt_s (global.get $sp) (i32.const 32480))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $PUSH (i64.const -4124476924212805632)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 4294967295)(i64.const -1)(i64.const -1)(i64.const -1))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $NOT)
(call $AND)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 4294967295)(i64.const -1)(i64.const -1)(i64.const -1))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $AND)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $OR)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 635))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1517))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 57)) (if (i32.gt_s (global.get $sp) (i32.const 32512))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $GAS)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $STATICCALL)
(global.set $sp (i32.add (global.get $sp) (i32.const -160)))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $RETURNDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $EQ)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 694))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 67)) (if (i32.gt_s (global.get $sp) (i32.const 32576))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 31))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $NOT)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 63))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $RETURNDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $AND)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $RETURNDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $RETURNDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $RETURNDATACOPY)
(global.set $sp (i32.add (global.get $sp) (i32.const -96)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 699))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 9)) (if (i32.gt_s (global.get $sp) (i32.const 32704))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 96))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
)(call $useGas (i64.const 83)) (if (i32.gt_s (global.get $sp) (i32.const 32704))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 64))
                  (then (unreachable)))(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 5))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 734))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1589))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 16)) (if (i32.lt_s (global.get $sp) (i32.const 160))
                  (then (unreachable)))(call $SWAP (i32.const 5))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
)(call $useGas (i64.const 17)) (if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 29)) (if (i32.gt_s (global.get $sp) (i32.const 32608))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $LT)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 766))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 19)) (if (i32.gt_s (global.get $sp) (i32.const 32704))
                 (then (unreachable)))(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1382))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 48)) (if (i32.gt_s (global.get $sp) (i32.const 32416))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 96))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADDRESS)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 4294967295)(i64.const -1)(i64.const -1))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $AND)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 8))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 810))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1675))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 33)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 36))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 826))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1540))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 122)) (if (i32.gt_s (global.get $sp) (i32.const 32480))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $PUSH (i64.const -4124476924212805632)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 4294967295)(i64.const -1)(i64.const -1)(i64.const -1))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $NOT)
(call $AND)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 4294967295)(i64.const -1)(i64.const -1)(i64.const -1))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $AND)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $OR)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 964))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1517))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 57)) (if (i32.gt_s (global.get $sp) (i32.const 32512))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $GAS)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $STATICCALL)
(global.set $sp (i32.add (global.get $sp) (i32.const -160)))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $RETURNDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $EQ)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1023))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 67)) (if (i32.gt_s (global.get $sp) (i32.const 32576))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 31))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $NOT)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 63))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $RETURNDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $AND)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $RETURNDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $RETURNDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $RETURNDATACOPY)
(global.set $sp (i32.add (global.get $sp) (i32.const -96)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1028))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 9)) (if (i32.gt_s (global.get $sp) (i32.const 32704))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 96))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
)(call $useGas (i64.const 55)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 64))
                  (then (unreachable)))(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 6))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $ADDRESS)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 4294967295)(i64.const -1)(i64.const -1))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $AND)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 8))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1073))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1675))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 33)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 36))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1089))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1540))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 122)) (if (i32.gt_s (global.get $sp) (i32.const 32480))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $PUSH (i64.const -4124476924212805632)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 4294967295)(i64.const -1)(i64.const -1)(i64.const -1))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $NOT)
(call $AND)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 4294967295)(i64.const -1)(i64.const -1)(i64.const -1))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $AND)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $OR)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1227))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1517))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 57)) (if (i32.gt_s (global.get $sp) (i32.const 32512))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $GAS)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $STATICCALL)
(global.set $sp (i32.add (global.get $sp) (i32.const -160)))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $RETURNDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $EQ)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1286))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 67)) (if (i32.gt_s (global.get $sp) (i32.const 32576))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 31))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $NOT)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 63))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $RETURNDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $AND)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $RETURNDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $RETURNDATASIZE)
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $RETURNDATACOPY)
(global.set $sp (i32.add (global.get $sp) (i32.const -96)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1291))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 9)) (if (i32.gt_s (global.get $sp) (i32.const 32704))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 96))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
)(call $useGas (i64.const 86)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 64))
                  (then (unreachable)))(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 5))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1328))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1589))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 44)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 192))
                  (then (unreachable)))(call $SWAP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 6153718530839045734)(i64.const 7378697629483820646)(i64.const 7378697629483820646)(i64.const 7378697629483820663))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $LOG (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const -128)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 6))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
)(call $useGas (i64.const 17)) (if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 29)) (if (i32.gt_s (global.get $sp) (i32.const 32608))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $CALLDATALOAD)
(call $SWAP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1402))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1840))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 19)) (if (i32.lt_s (global.get $sp) (i32.const 32))
                  (then (unreachable)))(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 35)) (if (i32.gt_s (global.get $sp) (i32.const 32576))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SLT)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1430))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 14)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1429))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1835))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) )(call $useGas (i64.const 30)) (if (i32.gt_s (global.get $sp) (i32.const 32544))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1444))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1387))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 26)) (if (i32.lt_s (global.get $sp) (i32.const 96))
                  (then (unreachable)))(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 21)) (if (i32.gt_s (global.get $sp) (i32.const 32608))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1464))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1567))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 21)) (if (i32.gt_s (global.get $sp) (i32.const 32608))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1474))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1578))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 35)) (if (i32.gt_s (global.get $sp) (i32.const 32576))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(call $SWAP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1490))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1737))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 35)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 64))
                  (then (unreachable)))(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 18)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1511))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1727))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 19)) (if (i32.gt_s (global.get $sp) (i32.const 32704))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 64))
                  (then (unreachable)))(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 24)) (if (i32.gt_s (global.get $sp) (i32.const 32576))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1529))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1453))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 32)) (if (i32.lt_s (global.get $sp) (i32.const 64))
                  (then (unreachable)))(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 44)) (if (i32.gt_s (global.get $sp) (i32.const 32576))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1561))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 4))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1502))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 19)) (if (i32.lt_s (global.get $sp) (i32.const 32))
                  (then (unreachable)))(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 31)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 30)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 21)) (if (i32.gt_s (global.get $sp) (i32.const 32608))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1600))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1727))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 23)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1611))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1727))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 37)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(call $SWAP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const -1)(i64.const -1)(i64.const -1)(i64.const -1))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $GT)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1664))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 14)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1663))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1788))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) )(call $useGas (i64.const 33)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 32))
                  (then (unreachable)))(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 21)) (if (i32.gt_s (global.get $sp) (i32.const 32608))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1686))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1727))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 23)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1697))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1727))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 31)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(call $SWAP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $LT)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1716))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 14)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1715))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1788))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) )(call $useGas (i64.const 33)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(if (i32.lt_s (global.get $sp) (i32.const 32))
                  (then (unreachable)))(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SUB)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 28)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 4)) (if (i32.gt_s (global.get $sp) (i32.const 32704))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $LT)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1767))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 49)) (if (i32.gt_s (global.get $sp) (i32.const 32608))
                 (then (unreachable)))(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1740))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 26)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(call $DUP (i32.const 3))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $GT)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1782))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 15)) (if (i32.gt_s (global.get $sp) (i32.const 32608))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $ADD)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
)(call $useGas (i64.const 17)) (if (i32.lt_s (global.get $sp) (i32.const 96))
                  (then (unreachable)))(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 25)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(call $PUSH (i64.const 5640894258543067136)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 17))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $MSTORE)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 36))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $REVERT) (br $done)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
)(call $useGas (i64.const 7)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $REVERT) (br $done)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
)(call $useGas (i64.const 18)) (if (i32.gt_s (global.get $sp) (i32.const 32640))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1849))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1727))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 20)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(call $DUP (i32.const 1))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $EQ)
(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1860))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))

                    (global.set $sp (i32.sub (global.get $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (global.get $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (global.get $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (global.get $sp) (i32.const 48)))
                          (i64.load (i32.add (global.get $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 6)) (if (i32.gt_s (global.get $sp) (i32.const 32672))
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(global.set $sp (i32.add (global.get $sp) (i32.const 32)))
(call $REVERT) (br $done)
(global.set $sp (i32.add (global.get $sp) (i32.const -64)))
)(call $useGas (i64.const 11)) (if (i32.lt_s (global.get $sp) (i32.const 0))
                  (then (unreachable)))(global.set $sp (i32.add (global.get $sp) (i32.const -32)))
;; jump
                      (local.set $jump_dest (call $check_overflow
                                             (i64.load (global.get $sp))
                                             (i64.load (i32.add (global.get $sp) (i32.const 8)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 16)))
                                             (i64.load (i32.add (global.get $sp) (i32.const 24)))))
                      (global.set $sp (i32.sub (global.get $sp) (i32.const 32)))
                      (br $loop))))


(data (i32.const 33832) "\60\80\60\40\52\34\80\15\61\00\10\57\60\00\80\fd\5b\50\61\07\7d\80\61\00\20\60\00\39\60\00\f3\fe")
(data (i32.const 33864) "\60\80\60\40\52\34\80\15\61\00\10\57\60\00\80\fd\5b\50\60\04\36\10\61\00\36\57\60\00\35\60\e0\1c\80\63\c6\c2\ea\17\14\61\00\3b\57\80\63\cf\83\70\88\14\61\00\6b\57\5b\60\00\80\fd\5b\61\00\55\60\04\80\36\03\81\01\90\61\00\50\91\90\61\05\80\56\5b\61\00\9b\56\5b\60\40\51\61\00\62\91\90\61\06\04\56\5b\60\40\51\80\91\03\90\f3\5b\61\00\85\60\04\80\36\03\81\01\90\61\00\80\91\90\61\05\80\56\5b\61\02\eb\56\5b\60\40\51\61\00\92\91\90\61\06\04\56\5b\60\40\51\80\91\03\90\f3\5b\60\00\60\02\82\10\15\61\00\ae\57\81\90\50\61\02\e6\56\5b\60\60\80\60\00\80\60\00\30\73\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\16\60\01\88\61\00\da\91\90\61\06\8b\56\5b\60\40\51\60\24\01\61\00\ea\91\90\61\06\04\56\5b\60\40\51\60\20\81\83\03\03\81\52\90\60\40\52\7f\c6\c2\ea\17\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\7b\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\19\16\60\20\82\01\80\51\7b\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\83\81\83\16\17\83\52\50\50\50\50\60\40\51\61\01\74\91\90\61\05\ed\56\5b\60\00\60\40\51\80\83\03\81\85\5a\fa\91\50\50\3d\80\60\00\81\14\61\01\af\57\60\40\51\91\50\60\1f\19\60\3f\3d\01\16\82\01\60\40\52\3d\82\52\3d\60\00\60\20\84\01\3e\61\01\b4\56\5b\60\60\91\50\5b\50\80\96\50\81\92\50\50\50\30\73\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\16\60\02\88\61\01\e1\91\90\61\06\8b\56\5b\60\40\51\60\24\01\61\01\f1\91\90\61\06\04\56\5b\60\40\51\60\20\81\83\03\03\81\52\90\60\40\52\7f\c6\c2\ea\17\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\7b\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\19\16\60\20\82\01\80\51\7b\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\83\81\83\16\17\83\52\50\50\50\50\60\40\51\61\02\7b\91\90\61\05\ed\56\5b\60\00\60\40\51\80\83\03\81\85\5a\fa\91\50\50\3d\80\60\00\81\14\61\02\b6\57\60\40\51\91\50\60\1f\19\60\3f\3d\01\16\82\01\60\40\52\3d\82\52\3d\60\00\60\20\84\01\3e\61\02\bb\56\5b\60\60\91\50\5b\50\80\95\50\81\92\50\50\50\60\20\85\01\51\92\50\60\20\84\01\51\91\50\81\83\61\02\de\91\90\61\06\35\56\5b\95\50\50\50\50\50\50\5b\91\90\50\56\5b\60\00\60\02\82\10\15\61\02\fe\57\81\90\50\61\05\66\56\5b\60\60\80\60\00\80\60\00\30\73\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\16\60\01\88\61\03\2a\91\90\61\06\8b\56\5b\60\40\51\60\24\01\61\03\3a\91\90\61\06\04\56\5b\60\40\51\60\20\81\83\03\03\81\52\90\60\40\52\7f\c6\c2\ea\17\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\7b\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\19\16\60\20\82\01\80\51\7b\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\83\81\83\16\17\83\52\50\50\50\50\60\40\51\61\03\c4\91\90\61\05\ed\56\5b\60\00\60\40\51\80\83\03\81\85\5a\fa\91\50\50\3d\80\60\00\81\14\61\03\ff\57\60\40\51\91\50\60\1f\19\60\3f\3d\01\16\82\01\60\40\52\3d\82\52\3d\60\00\60\20\84\01\3e\61\04\04\56\5b\60\60\91\50\5b\50\80\96\50\81\92\50\50\50\30\73\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\16\60\02\88\61\04\31\91\90\61\06\8b\56\5b\60\40\51\60\24\01\61\04\41\91\90\61\06\04\56\5b\60\40\51\60\20\81\83\03\03\81\52\90\60\40\52\7f\c6\c2\ea\17\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\7b\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\19\16\60\20\82\01\80\51\7b\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\83\81\83\16\17\83\52\50\50\50\50\60\40\51\61\04\cb\91\90\61\05\ed\56\5b\60\00\60\40\51\80\83\03\81\85\5a\fa\91\50\50\3d\80\60\00\81\14\61\05\06\57\60\40\51\91\50\60\1f\19\60\3f\3d\01\16\82\01\60\40\52\3d\82\52\3d\60\00\60\20\84\01\3e\61\05\0b\56\5b\60\60\91\50\5b\50\80\95\50\81\92\50\50\50\60\20\85\01\51\92\50\60\20\84\01\51\91\50\60\00\82\84\61\05\30\91\90\61\06\35\56\5b\90\50\80\60\01\55\80\7f\55\66\66\66\66\66\66\66\66\66\66\66\66\66\66\66\66\66\66\66\66\66\66\66\66\66\66\66\66\66\66\77\60\00\80\a2\80\96\50\50\50\50\50\50\50\5b\91\90\50\56\5b\60\00\81\35\90\50\61\05\7a\81\61\07\30\56\5b\92\91\50\50\56\5b\60\00\60\20\82\84\03\12\15\61\05\96\57\61\05\95\61\07\2b\56\5b\5b\60\00\61\05\a4\84\82\85\01\61\05\6b\56\5b\91\50\50\92\91\50\50\56\5b\60\00\61\05\b8\82\61\06\1f\56\5b\61\05\c2\81\85\61\06\2a\56\5b\93\50\61\05\d2\81\85\60\20\86\01\61\06\c9\56\5b\80\84\01\91\50\50\92\91\50\50\56\5b\61\05\e7\81\61\06\bf\56\5b\82\52\50\50\56\5b\60\00\61\05\f9\82\84\61\05\ad\56\5b\91\50\81\90\50\92\91\50\50\56\5b\60\00\60\20\82\01\90\50\61\06\19\60\00\83\01\84\61\05\de\56\5b\92\91\50\50\56\5b\60\00\81\51\90\50\91\90\50\56\5b\60\00\81\90\50\92\91\50\50\56\5b\60\00\61\06\40\82\61\06\bf\56\5b\91\50\61\06\4b\83\61\06\bf\56\5b\92\50\82\7f\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\03\82\11\15\61\06\80\57\61\06\7f\61\06\fc\56\5b\5b\82\82\01\90\50\92\91\50\50\56\5b\60\00\61\06\96\82\61\06\bf\56\5b\91\50\61\06\a1\83\61\06\bf\56\5b\92\50\82\82\10\15\61\06\b4\57\61\06\b3\61\06\fc\56\5b\5b\82\82\03\90\50\92\91\50\50\56\5b\60\00\81\90\50\91\90\50\56\5b\60\00\5b\83\81\10\15\61\06\e7\57\80\82\01\51\81\84\01\52\60\20\81\01\90\50\61\06\cc\56\5b\83\81\11\15\61\06\f6\57\60\00\84\84\01\52\5b\50\50\50\50\56\5b\7f\4e\48\7b\71\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\60\00\52\60\11\60\04\52\60\24\60\00\fd\5b\60\00\80\fd\5b\61\07\39\81\61\06\bf\56\5b\81\14\61\07\44\57\60\00\80\fd\5b\50\56\fe\a2\64\69\70\66\73\58\22\12\20\e2\73\0a\67\13\0d\12\83\ae\8a\d2\b8\08\6c\a0\95\fb\bf\94\3d\98\71\07\2d\be\8f\97\5d\c4\3a\a1\dd\64\73\6f\6c\63\43\00\08\07\00\33")
(func $evm_bytecode (export "evm_bytecode") (result i32 i32 i32)
    i32.const 33832
    i32.const 32
    i32.const 1917)


)
